package com.example.souffleforcetest

class OrchideeChallengeHandler {
    
    // ==================== LOGIQUE DES D√âFIS ORCHID√âE ====================
    
    fun updateChallenge(
        challengeId: Int, 
        force: Float, 
        plantState: String, 
        challengeData: MutableMap<String, Any>
    ) {
        when (challengeId) {
            1 -> updateOrchideeChallenge1_Saccades(force, plantState, challengeData)
            2 -> updateOrchideeChallenge2_Delicat(force, plantState, challengeData)
            3 -> updateOrchideeChallenge3_Patience(force, plantState, challengeData)
        }
    }
    
    private fun updateOrchideeChallenge1_Saccades(
        force: Float, 
        plantState: String, 
        challengeData: MutableMap<String, Any>
    ) {
        // D√©fi 1: Saccades r√©guli√®res pour cr√©er diff√©rentes esp√®ces
        challengeData["currentPhase"] = plantState
        
        // D√©tecter les saccades (changements brusques de force)
        val lastForce = challengeData["lastForce"] as? Float ?: 0f
        val forceDifference = kotlin.math.abs(force - lastForce)
        
        if (forceDifference > 0.3f && force > 0.2f) {
            val saccadeCount = challengeData["saccadeCount"] as? Int ?: 0
            challengeData["saccadeCount"] = saccadeCount + 1
            println("Orchid√©e - Saccade d√©tect√©e! Total: ${saccadeCount + 1}/10")
        }
        
        challengeData["lastForce"] = force
    }
    
    private fun updateOrchideeChallenge2_Delicat(
        force: Float, 
        plantState: String, 
        challengeData: MutableMap<String, Any>
    ) {
        // D√©fi 2: Souffle d√©licat et contr√¥l√©
        challengeData["currentPhase"] = plantState
        
        // V√©rifier la d√©licatesse du souffle
        if (force > 0.1f && force < 0.4f) {
            val delicateTime = challengeData["delicateTime"] as? Float ?: 0f
            challengeData["delicateTime"] = delicateTime + 0.016f // ~60fps
        }
    }
    
    private fun updateOrchideeChallenge3_Patience(
        force: Float, 
        plantState: String, 
        challengeData: MutableMap<String, Any>
    ) {
        // D√©fi 3: Patience pour cultiver toutes les esp√®ces
        challengeData["currentPhase"] = plantState
        
        // Mesurer la dur√©e totale du d√©fi
        val startTime = challengeData["startTime"] as? Long ?: System.currentTimeMillis()
        if (challengeData["startTime"] == null) {
            challengeData["startTime"] = startTime
        }
        
        val currentTime = System.currentTimeMillis()
        val elapsedTime = (currentTime - startTime) / 1000f // en secondes
        challengeData["patienceTime"] = elapsedTime
    }
    
    // ‚úÖ CORRIG√â: Signature coh√©rente avec ChallengeDataManager
    fun checkChallenge(
        challengeId: Int,
        orchideeFlowersInZone: List<String>,
        orchideeSpeciesCount: Int,
        orchideeTotalFlowers: List<String>
    ): Boolean {
        return when (challengeId) {
            1 -> {
                // D√©fi 1: 10 saccades + 6 esp√®ces + 8 fleurs en zone
                val saccadesCompleted = 10 // Simul√© - devrait venir de challengeData
                saccadesCompleted >= 10 && 
                orchideeSpeciesCount >= 6 && 
                orchideeFlowersInZone.size >= 8
            }
            2 -> {
                // D√©fi 2: 3 tiges d√©licates + 5 fleurs en zone pr√©cise
                val tigesCompletes = 3 // Simul√© - devrait venir de OrchideeData
                tigesCompletes >= 3 && 
                orchideeFlowersInZone.size >= 5
            }
            3 -> {
                // D√©fi 3: 6 esp√®ces + 20 fleurs totales
                orchideeSpeciesCount >= 6 && 
                orchideeTotalFlowers.size >= 20
            }
            else -> false
        }
    }
    
    // ‚úÖ CORRIG√â: Signature coh√©rente avec ChallengeDataManager
    fun getSuccessMessage(
        challengeId: Int,
        orchideeFlowersInZone: List<String>,
        orchideeSpeciesCount: Int,
        orchideeTotalFlowers: List<String>
    ): String {
        return when (challengeId) {
            1 -> {
                val zonesFlowers = orchideeFlowersInZone.size
                "D√©fi r√©ussi! Saccades ma√Ætris√©es - $orchideeSpeciesCount esp√®ces cr√©√©es, $zonesFlowers orchid√©es en zone √©l√©gante!\nüå∏ TECHNIQUE PARFAITE!"
            }
            2 -> {
                val zonesFlowers = orchideeFlowersInZone.size
                "D√©fi r√©ussi! Souffle d√©licat ma√Ætris√© - $zonesFlowers orchid√©es dans la zone de pr√©cision!\nüéØ CONTR√îLE PARFAIT!"
            }
            3 -> {
                val totalFlowers = orchideeTotalFlowers.size
                "D√©fi r√©ussi! Patience r√©compens√©e - $orchideeSpeciesCount esp√®ces compl√®tes, $totalFlowers orchid√©es cultiv√©es!\nüëë GRAND MA√éTRE DES ORCHID√âES!"
            }
            else -> "D√©fi orchid√©e r√©ussi!"
        }
    }
    
    // ‚úÖ CORRIG√â: Signature coh√©rente avec ChallengeDataManager
    fun getFailMessage(
        challengeId: Int,
        orchideeFlowersInZone: List<String>,
        orchideeSpeciesCount: Int,
        orchideeTotalFlowers: List<String>
    ): String {
        return when (challengeId) {
            1 -> {
                val zonesFlowers = orchideeFlowersInZone.size
                "D√©fi √©chou√© - Seulement $orchideeSpeciesCount/6 esp√®ces et $zonesFlowers/8 orchid√©es en zone!\nContinuez √† pratiquer les saccades r√©guli√®res."
            }
            2 -> {
                val zonesFlowers = orchideeFlowersInZone.size
                "D√©fi √©chou√© - Seulement $zonesFlowers/5 orchid√©es dans la zone de pr√©cision!\nTravaillez votre souffle d√©licat et contr√¥l√©."
            }
            3 -> {
                val totalFlowers = orchideeTotalFlowers.size
                "D√©fi √©chou√© - $orchideeSpeciesCount/6 esp√®ces et $totalFlowers/20 fleurs!\nLa patience est la cl√© de la ma√Ætrise des orchid√©es."
            }
            else -> "D√©fi orchid√©e √©chou√©!"
        }
    }
    
    // ==================== M√âTHODES UTILITAIRES ORCHID√âE ====================
    
    fun resetDissolveEffects(challengeData: MutableMap<String, Any>) {
        // Reset des donn√©es sp√©cifiques aux orchid√©es
        challengeData.remove("saccadeCount")
        challengeData.remove("delicateTime")
        challengeData.remove("patienceTime")
        challengeData.remove("lastForce")
        challengeData.remove("startTime")
        challengeData.remove("currentPhase")
        
        // Reset des donn√©es de dissolution
        challengeData.remove("dissolveProgress")
        challengeData.remove("stemsCollapsing")
        challengeData.remove("leavesShriveling")
        challengeData.remove("flowersPetalsWilting")
        
        println("Orchid√©e - Effets de dissolution r√©initialis√©s")
    }
    
    fun getSaccadeCount(challengeData: Map<String, Any>): Int {
        return challengeData["saccadeCount"] as? Int ?: 0
    }
    
    fun getDelicateTime(challengeData: Map<String, Any>): Float {
        return challengeData["delicateTime"] as? Float ?: 0f
    }
    
    fun getPatienceTime(challengeData: Map<String, Any>): Float {
        return challengeData["patienceTime"] as? Float ?: 0f
    }
    
    fun getCurrentPhase(challengeData: Map<String, Any>): String {
        return challengeData["currentPhase"] as? String ?: "IDLE"
    }
    
    // ==================== CONSEILS SP√âCIALIS√âS ORCHID√âE ====================
    
    fun getChallengeHint(challengeId: Int, currentProgress: Map<String, Any>): String {
        return when (challengeId) {
            1 -> {
                val saccades = getSaccadeCount(currentProgress)
                val species = currentProgress["speciesCount"] as? Int ?: 0
                val inZone = currentProgress["flowersInZone"] as? Int ?: 0
                
                when {
                    saccades < 5 -> "üí° Conseil: Alternez entre souffle fort et doux pour cr√©er des saccades"
                    species < 3 -> "üí° Conseil: Chaque saccade peut cr√©er une esp√®ce diff√©rente"
                    inZone < 4 -> "üí° Conseil: Visez la zone √©l√©gante au centre pour les orchid√©es"
                    else -> "üí° Conseil: Vous progressez bien! Continuez les saccades r√©guli√®res"
                }
            }
            2 -> {
                val inZone = currentProgress["flowersInZone"] as? Int ?: 0
                val delicateTime = getDelicateTime(currentProgress)
                
                when {
                    delicateTime < 10f -> "üí° Conseil: Maintenez un souffle tr√®s doux et constant"
                    inZone < 2 -> "üí° Conseil: La zone de pr√©cision est plus petite, soyez tr√®s pr√©cis"
                    else -> "üí° Conseil: Excellent contr√¥le! Continuez avec d√©licatesse"
                }
            }
            3 -> {
                val species = currentProgress["speciesCount"] as? Int ?: 0
                val totalFlowers = currentProgress["totalFlowers"] as? Int ?: 0
                val patienceTime = getPatienceTime(currentProgress)
                
                when {
                    species < 3 -> "üí° Conseil: Explorez toutes les techniques pour cr√©er 6 esp√®ces"
                    totalFlowers < 10 -> "üí° Conseil: Prenez votre temps, cultivez avec patience"
                    patienceTime < 60f -> "üí° Conseil: Les orchid√©es demandent du temps et de la pers√©v√©rance"
                    else -> "üí° Conseil: Vous ma√Ætrisez l'art des orchid√©es! Continuez!"
                }
            }
            else -> "üí° Conseil: Chaque orchid√©e est unique, adaptez votre technique"
        }
    }
    
    fun getSpecializedAdvice(challengeId: Int): List<String> {
        return when (challengeId) {
            1 -> listOf(
                "üå∏ Les saccades cr√©ent diff√©rentes esp√®ces d'orchid√©es",
                "üéØ Visez la zone √©l√©gante pour maximiser vos points",
                "‚ö° Alternez entre souffle fort et doux rapidement",
                "üå∫ 6 esp√®ces diff√©rentes sont n√©cessaires pour r√©ussir"
            )
            2 -> listOf(
                "üå¨Ô∏è Souffle d√©licat et contr√¥l√© uniquement",
                "üéØ Zone de pr√©cision plus petite que d'habitude",
                "üå∏ Chaque tige doit √™tre compl√®te avec ses fleurs",
                "‚è±Ô∏è Prenez le temps n√©cessaire pour la pr√©cision"
            )
            3 -> listOf(
                "üåà Explorez toutes les 6 esp√®ces d'orchid√©es",
                "üïê La patience est la cl√© de ce d√©fi",
                "üå∏ 20 fleurs au total, pas de zone sp√©cifique",
                "üëë D√©fi ultime de ma√Ætrise compl√®te"
            )
            else -> listOf("üå∏ Ma√Ætrisez l'art d√©licat des orchid√©es")
        }
    }
}
