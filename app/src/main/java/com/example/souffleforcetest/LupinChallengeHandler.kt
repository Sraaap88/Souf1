package com.example.souffleforcetest

class LupinChallengeHandler {
    
    // ==================== LOGIQUE DES DÃ‰FIS LUPIN MODIFIÃ‰E ====================
    
    fun updateChallenge(
        challengeId: Int, 
        force: Float, 
        plantState: String, 
        challengeData: MutableMap<String, Any>
    ) {
        when (challengeId) {
            1 -> updateLupinChallenge1_ColoredSpikes(force, plantState, challengeData)
            2 -> updateLupinChallenge2_CompleteStems(force, plantState, challengeData)
            3 -> updateLupinChallenge3_TotalFlowers(force, plantState, challengeData)
        }
    }
    
    private fun updateLupinChallenge1_ColoredSpikes(
        force: Float, 
        plantState: String, 
        challengeData: MutableMap<String, Any>
    ) {
        challengeData["currentPhase"] = plantState
    }
    
    private fun updateLupinChallenge2_CompleteStems(
        force: Float, 
        plantState: String, 
        challengeData: MutableMap<String, Any>
    ) {
        challengeData["currentPhase"] = plantState
    }
    
    private fun updateLupinChallenge3_TotalFlowers(
        force: Float, 
        plantState: String, 
        challengeData: MutableMap<String, Any>
    ) {
        challengeData["currentPhase"] = plantState
    }
    
    fun checkChallenge(
        challengeId: Int,
        lupinSpikeColors: Set<String>,
        lupinCompleteStems: List<String>,
        lupinFlowers: List<String>
    ): Boolean {
        return when (challengeId) {
            1 -> lupinSpikeColors.size >= 3
            2 -> lupinCompleteStems.size >= 5
            3 -> lupinFlowers.size >= 12  // MODIFIÃ‰: 15 â†’ 12 fleurs
            else -> false
        }
    }
    
    fun getSuccessMessage(
        challengeId: Int,
        lupinSpikeColors: Set<String>,
        lupinCompleteStems: List<String>,
        lupinFlowers: List<String>
    ): String {
        return when (challengeId) {
            1 -> "DÃ©fi rÃ©ussi! ${lupinSpikeColors.size} Ã©pis de couleurs diffÃ©rentes!"
            2 -> "DÃ©fi rÃ©ussi! ${lupinCompleteStems.size} tiges complÃ¨tes!"
            3 -> "DÃ©fi rÃ©ussi! ${lupinFlowers.size} fleurs dans les Ã©pis!\nðŸŒº IRIS DÃ‰BLOQUÃ‰!"  // MODIFIÃ‰: texte mis Ã  jour
            else -> "DÃ©fi rÃ©ussi!"
        }
    }
    
    fun getFailMessage(
        challengeId: Int,
        lupinSpikeColors: Set<String>,
        lupinCompleteStems: List<String>,
        lupinFlowers: List<String>
    ): String {
        return when (challengeId) {
            1 -> "DÃ©fi Ã©chouÃ© - Seulement ${lupinSpikeColors.size}/3 couleurs d'Ã©pis!"
            2 -> "DÃ©fi Ã©chouÃ© - Seulement ${lupinCompleteStems.size}/5 tiges complÃ¨tes!"
            3 -> "DÃ©fi Ã©chouÃ© - Seulement ${lupinFlowers.size}/12 fleurs dans les Ã©pis!"  // MODIFIÃ‰: 15 â†’ 12
            else -> "DÃ©fi Ã©chouÃ©!"
        }
    }
}
