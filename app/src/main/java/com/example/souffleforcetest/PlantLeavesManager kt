package com.example.souffleforcetest

import kotlin.math.*

class PlantLeavesManager(private val plantStem: PlantStem) {
    
    // ==================== DATA CLASSES ====================
    
    data class Leaf(
        val x: Float,
        val y: Float,
        val width: Float,
        val height: Float,
        val angle: Float,
        val stemIndex: Int, // -1 pour tige principale, 0-5 pour branches
        val attachmentHeight: Float,
        val leafType: LeafType,
        var growthProgress: Float = 0f,
        val side: LeafSide,
        var oscillation: Float = 0f,
        val lobeDensity: Int, // Nombre de lobes
        val serrationDepth: Float, // Profondeur des dentelures
        val leafShape: LeafShape, // Forme spécifique
        val asymmetryFactor: Float, // Asymétrie naturelle
        val ageStage: Float, // 0.0 = jeune, 1.0 = mature
        val petioleLength: Float // Longueur du pétiole
    )
    
    enum class LeafType { BASAL_LARGE, STEM_MEDIUM, STEM_SMALL }
    enum class LeafSide { LEFT, RIGHT, CENTER }
    enum class LeafShape { DEEPLY_LOBED, MODERATELY_LOBED, SLIGHTLY_TOOTHED }
    
    // ==================== VARIABLES ====================
    
    private val leaves = mutableListOf<Leaf>()
    private var leavesCreated = false
    
    // ==================== FONCTIONS PUBLIQUES ====================
    
    fun updateLeaves(force: Float) {
        if (!leavesCreated && plantStem.getStemHeight() > 50f) {
            createAllLeaves()
            leavesCreated = true
        }
        
        growExistingLeaves(force)
        updateLeafOscillations()
    }
    
    fun getLeaves(): List<Leaf> = leaves
    
    fun resetLeaves() {
        leaves.clear()
        leavesCreated = false
    }
    
    // ==================== CRÉATION DES FEUILLES ====================
    
    private fun createAllLeaves() {
        createBasalLeaves()
        createMainStemLeaves()
        createBranchLeaves()
    }
    
    private fun createBasalLeaves() {
        val baseX = plantStem.getStemBaseX()
        val baseY = plantStem.getStemBaseY()
        val basalCount = (5..7).random()
        
        for (i in 0 until basalCount) {
            val angle = (i * 360f / basalCount) + (-20..20).random()
            val distance = (40..70).random().toFloat()
            
            val radians = Math.toRadians(angle.toDouble())
            val leafX = baseX + (cos(radians) * distance).toFloat()
            val leafY = baseY - (8..20).random().toFloat()
            
            val leaf = Leaf(
                x = leafX,
                y = leafY,
                width = (55..85).random().toFloat(),
                height = (30..45).random().toFloat(),
                angle = angle + (-15..15).random(),
                stemIndex = -1,
                attachmentHeight = 0f,
                leafType = LeafType.BASAL_LARGE,
                side = determineSide(leafX, baseX),
                lobeDensity = (8..12).random(),
                serrationDepth = (0.3f..0.5f).random(),
                leafShape = LeafShape.DEEPLY_LOBED,
                asymmetryFactor = (0.1f..0.4f).random(),
                ageStage = (0.3f..0.9f).random(),
                petioleLength = (8f..18f).random()
            )
            
            leaves.add(leaf)
        }
    }
    
    private fun createMainStemLeaves() {
        if (plantStem.mainStem.size < 10) return
        
        val leafCount = (3..4).random()
        
        for (i in 0 until leafCount) {
            val heightRatio = (0.15f + i * 0.25f)
            val targetHeight = plantStem.getStemHeight() * heightRatio
            
            val stemPoint = findStemPointAtHeight(plantStem.mainStem, targetHeight) ?: continue
            
            val side = if (i % 2 == 0) LeafSide.LEFT else LeafSide.RIGHT
            val sideMultiplier = if (side == LeafSide.LEFT) -1f else 1f
            
            val petioleLength = (12f..25f).random()
            val leafX = stemPoint.x + (sideMultiplier * petioleLength)
            val leafY = stemPoint.y - (2..8).random()
            
            val leaf = Leaf(
                x = leafX,
                y = leafY,
                width = (40..60).random().toFloat(),
                height = (22..35).random().toFloat(),
                angle = (sideMultiplier * (30..60).random()).toFloat(),
                stemIndex = -1,
                attachmentHeight = targetHeight,
                leafType = LeafType.STEM_MEDIUM,
                side = side,
                lobeDensity = (5..8).random(),
                serrationDepth = (0.25f..0.45f).random(),
                leafShape = LeafShape.MODERATELY_LOBED,
                asymmetryFactor = (0.15f..0.35f).random(),
                ageStage = (0.4f..0.8f).random(),
                petioleLength = petioleLength
            )
            
            leaves.add(leaf)
        }
    }
    
    private fun createBranchLeaves() {
        for ((branchIndex, branch) in plantStem.branches.withIndex()) {
            if (branch.points.size < 5) continue
            
            val leafCount = (2..3).random()
            
            for (i in 0 until leafCount) {
                val heightRatio = (0.25f + i * 0.3f)
                val targetHeight = branch.currentHeight * heightRatio
                
                val branchPoint = findStemPointAtHeight(branch.points, targetHeight) ?: continue
                
                val side = if (i % 2 == 0) LeafSide.LEFT else LeafSide.RIGHT
                val sideMultiplier = if (side == LeafSide.LEFT) -1f else 1f
                val branchDirection = if (branch.angle < 0) -1f else 1f
                
                val petioleLength = (8f..15f).random()
                val leafX = branchPoint.x + (sideMultiplier * branchDirection * petioleLength)
                val leafY = branchPoint.y - (1..6).random()
                
                val leaf = Leaf(
                    x = leafX,
                    y = leafY,
                    width = (25..40).random().toFloat(),
                    height = (15..25).random().toFloat(),
                    angle = (sideMultiplier * branchDirection * (20..40).random()).toFloat(),
                    stemIndex = branchIndex,
                    attachmentHeight = targetHeight,
                    leafType = LeafType.STEM_SMALL,
                    side = side,
                    lobeDensity = (3..6).random(),
                    serrationDepth = (0.15f..0.3f).random(),
                    leafShape = LeafShape.SLIGHTLY_TOOTHED,
                    asymmetryFactor = (0.1f..0.3f).random(),
                    ageStage = (0.5f..1.0f).random(),
                    petioleLength = petioleLength
                )
                
                leaves.add(leaf)
            }
        }
    }
    
    // ==================== CROISSANCE AVEC SOUFFLE ====================
    
    private fun growExistingLeaves(force: Float) {
        for (i in leaves.indices) {
            val leaf = leaves[i]
            
            if (leaf.growthProgress < 1f) {
                val baseSpeed = when (leaf.leafType) {
                    LeafType.BASAL_LARGE -> 0.012f
                    LeafType.STEM_MEDIUM -> 0.018f
                    LeafType.STEM_SMALL -> 0.025f
                }
                
                // Vitesse selon l'âge (jeunes poussent plus vite)
                val ageMultiplier = 1.3f - (leaf.ageStage * 0.5f)
                
                val forceQuality = force.coerceIn(0f, 1f)
                val breathMultiplier = 0.4f + (forceQuality * 1.1f)
                
                val progressCurve = sqrt(1f - leaf.growthProgress)
                val finalSpeed = baseSpeed * ageMultiplier * breathMultiplier * progressCurve
                
                leaves[i] = leaf.copy(
                    growthProgress = (leaf.growthProgress + finalSpeed).coerceAtMost(1f)
                )
            }
        }
    }
    
    private fun updateLeafOscillations() {
        for (i in leaves.indices) {
            val leaf = leaves[i]
            val time = System.currentTimeMillis()
            
            val windStrength = 0.5f
            val timeOffset = i * 0.8f
            val sizeMultiplier = when (leaf.leafType) {
                LeafType.BASAL_LARGE -> 0.4f
                LeafType.STEM_MEDIUM -> 0.7f
                LeafType.STEM_SMALL -> 1.1f
            }
            
            val primaryWave = sin((time * 0.0006f) + timeOffset)
            val secondaryWave = sin((time * 0.0012f) + timeOffset * 1.7f) * 0.4f
            val microTremor = sin((time * 0.003f) + timeOffset * 2.3f) * 0.15f
            
            val oscillation = (primaryWave + secondaryWave + microTremor) * 
                             windStrength * sizeMultiplier * leaf.growthProgress
            
            leaves[i] = leaf.copy(oscillation = oscillation)
        }
    }
    
    // ==================== FORME RÉALISTE ====================
    
    fun getRealisticLeafPath(leaf: Leaf): List<Pair<Float, Float>> {
        val points = mutableListOf<Pair<Float, Float>>()
        val currentWidth = leaf.width * leaf.growthProgress
        val currentHeight = leaf.height * leaf.growthProgress
        
        if (currentWidth < 4f || currentHeight < 4f) return points
        
        val centerX = leaf.x + leaf.oscillation
        val centerY = leaf.y
        
        val totalPoints = leaf.lobeDensity * 3
        
        for (i in 0..totalPoints) {
            val progress = i.toFloat() / totalPoints
            val angle = progress * PI.toFloat() * 2f
            
            // Forme de base avec asymétrie
            val asymmetryX = 1f + sin(angle * 2f) * leaf.asymmetryFactor * 0.3f
            val asymmetryY = 1f + cos(angle * 3f) * leaf.asymmetryFactor * 0.2f
            
            val baseRadius = currentWidth * 0.5f * asymmetryX
            val baseX = cos(angle) * baseRadius
            val baseY = sin(angle) * currentHeight * 0.5f * asymmetryY
            
            // Lobes selon le type de feuille
            val lobeFactor = when (leaf.leafShape) {
                LeafShape.DEEPLY_LOBED -> {
                    val majorLobes = 1f + sin(angle * leaf.lobeDensity * 0.5f) * leaf.serrationDepth
                    val fineSerrations = 1f + sin(angle * leaf.lobeDensity * 2f) * (leaf.serrationDepth * 0.3f)
                    majorLobes * fineSerrations
                }
                LeafShape.MODERATELY_LOBED -> {
                    1f + sin(angle * leaf.lobeDensity * 0.7f) * leaf.serrationDepth
                }
                LeafShape.SLIGHTLY_TOOTHED -> {
                    1f + sin(angle * leaf.lobeDensity * 1.2f) * leaf.serrationDepth
                }
            }
            
            // Variation naturelle
            val naturalVariation = 1f + sin(angle * 7.3f + leaf.x * 0.1f) * 0.05f
            
            val finalX = centerX + (baseX * lobeFactor * naturalVariation)
            val finalY = centerY + (baseY * lobeFactor * naturalVariation)
            
            points.add(Pair(finalX, finalY))
        }
        
        return points
    }
    
    // ==================== COULEURS RÉALISTES ====================
    
    fun getLeafColor(leaf: Leaf): Triple<Int, Int, Int> {
        val baseColor = when (leaf.ageStage) {
            in 0.0f..0.3f -> Triple(60, 180, 60)   // Jeune : vert clair
            in 0.3f..0.7f -> Triple(50, 150, 50)   // Moyen : vert moyen
            else -> Triple(34, 139, 34)            // Mature : vert foncé
        }
        
        val variation = (leaf.asymmetryFactor * 30).toInt()
        val r = (baseColor.first + (-variation..variation).random()).coerceIn(0, 255)
        val g = (baseColor.second + (-variation..variation).random()).coerceIn(0, 255)
        val b = (baseColor.third + (-variation..variation).random()).coerceIn(0, 255)
        
        return Triple(r, g, b)
    }
    
    // ==================== UTILITAIRES ====================
    
    private fun determineSide(leafX: Float, baseX: Float): LeafSide {
        return when {
            leafX < baseX - 20 -> LeafSide.LEFT
            leafX > baseX + 20 -> LeafSide.RIGHT
            else -> LeafSide.CENTER
        }
    }
    
    private fun findStemPointAtHeight(points: List<PlantStem.StemPoint>, targetHeight: Float): PlantStem.StemPoint? {
        if (points.isEmpty()) return null
        
        val baseY = plantStem.getStemBaseY()
        val targetY = baseY - targetHeight
        
        return points.minByOrNull { abs(it.y - targetY) }
    }
}
