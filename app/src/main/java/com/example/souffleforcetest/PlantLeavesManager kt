package com.example.souffleforcetest

import kotlin.math.*

class PlantLeavesManager(private val plantStem: PlantStem) {
    
    // ==================== DATA CLASSES ====================
    
    data class Leaf(
        val x: Float,
        val y: Float,
        val width: Float,
        val height: Float,
        val angle: Float,
        val stemIndex: Int, // -1 pour tige principale, 0-5 pour branches
        val attachmentHeight: Float,
        val leafType: LeafType,
        var growthProgress: Float = 0f,
        val side: LeafSide,
        var oscillation: Float = 0f
    )
    
    enum class LeafType { BASAL_LARGE, STEM_MEDIUM, STEM_SMALL }
    enum class LeafSide { LEFT, RIGHT, CENTER }
    
    // ==================== VARIABLES ====================
    
    private val leaves = mutableListOf<Leaf>()
    private var leavesCreated = false
    
    // ==================== FONCTIONS PUBLIQUES ====================
    
    fun updateLeaves(force: Float) {
        if (!leavesCreated && plantStem.getStemHeight() > 50f) {
            createAllLeaves()
            leavesCreated = true
        }
        
        growExistingLeaves(force)
        updateLeafOscillations()
    }
    
    fun getLeaves(): List<Leaf> = leaves
    
    fun resetLeaves() {
        leaves.clear()
        leavesCreated = false
    }
    
    // ==================== CRÃ‰ATION DES FEUILLES ====================
    
    private fun createAllLeaves() {
        createBasalLeaves()
        createMainStemLeaves()
        createBranchLeaves()
    }
    
    private fun createBasalLeaves() {
        val baseX = plantStem.getStemBaseX()
        val baseY = plantStem.getStemBaseY()
        val basalCount = (4..6).random()
        
        for (i in 0 until basalCount) {
            val angle = (i * 360f / basalCount) + (-15..15).random()
            val distance = (35..55).random().toFloat()
            
            val radians = Math.toRadians(angle.toDouble())
            val leafX = baseX + (cos(radians) * distance).toFloat()
            val leafY = baseY - (5..15).random().toFloat()
            
            val leaf = Leaf(
                x = leafX,
                y = leafY,
                width = (45..65).random().toFloat(),
                height = (25..35).random().toFloat(),
                angle = angle + (-10..10).random(),
                stemIndex = -1,
                attachmentHeight = 0f,
                leafType = LeafType.BASAL_LARGE,
                side = when {
                    leafX < baseX - 10 -> LeafSide.LEFT
                    leafX > baseX + 10 -> LeafSide.RIGHT
                    else -> LeafSide.CENTER
                }
            )
            
            leaves.add(leaf)
        }
    }
    
    private fun createMainStemLeaves() {
        if (plantStem.mainStem.size < 10) return
        
        val leafCount = (2..3).random()
        
        for (i in 0 until leafCount) {
            val heightRatio = (0.2f + i * 0.3f)
            val targetHeight = plantStem.getStemHeight() * heightRatio
            
            val stemPoint = findStemPointAtHeight(plantStem.mainStem, targetHeight) ?: continue
            
            val side = if (i % 2 == 0) LeafSide.LEFT else LeafSide.RIGHT
            val sideMultiplier = if (side == LeafSide.LEFT) -1f else 1f
            
            val leafX = stemPoint.x + (sideMultiplier * (15..25).random())
            val leafY = stemPoint.y - (2..8).random()
            
            val leaf = Leaf(
                x = leafX,
                y = leafY,
                width = (25..35).random().toFloat(),
                height = (15..22).random().toFloat(),
                angle = (sideMultiplier * (20..40).random()).toFloat(),
                stemIndex = -1,
                attachmentHeight = targetHeight,
                leafType = LeafType.STEM_MEDIUM,
                side = side
            )
            
            leaves.add(leaf)
        }
    }
    
    private fun createBranchLeaves() {
        for ((branchIndex, branch) in plantStem.branches.withIndex()) {
            if (branch.points.size < 5) continue
            
            val leafCount = (1..2).random()
            val branchHeight = branch.currentHeight
            
            for (i in 0 until leafCount) {
                val heightRatio = (0.3f + i * 0.4f)
                val targetHeight = branchHeight * heightRatio
                
                val branchPoint = findStemPointAtHeight(branch.points, targetHeight) ?: continue
                
                val side = if (i % 2 == 0) LeafSide.LEFT else LeafSide.RIGHT
                val sideMultiplier = if (side == LeafSide.LEFT) -1f else 1f
                
                val branchDirection = if (branch.angle < 0) -1f else 1f
                val adjustedMultiplier = sideMultiplier * branchDirection * 0.7f
                
                val leafX = branchPoint.x + (adjustedMultiplier * (10..18).random())
                val leafY = branchPoint.y - (1..5).random()
                
                val leaf = Leaf(
                    x = leafX,
                    y = leafY,
                    width = (18..28).random().toFloat(),
                    height = (10..16).random().toFloat(),
                    angle = (adjustedMultiplier * (15..30).random()).toFloat(),
                    stemIndex = branchIndex,
                    attachmentHeight = targetHeight,
                    leafType = LeafType.STEM_SMALL,
                    side = side
                )
                
                leaves.add(leaf)
            }
        }
    }
    
    // ==================== CROISSANCE DES FEUILLES ====================
    
    private fun growExistingLeaves(force: Float) {
        for (i in leaves.indices) {
            val leaf = leaves[i]
            
            if (leaf.growthProgress < 1f) {
                val growthSpeed = when (leaf.leafType) {
                    LeafType.BASAL_LARGE -> 0.015f
                    LeafType.STEM_MEDIUM -> 0.022f
                    LeafType.STEM_SMALL -> 0.030f
                }
                
                val forceMultiplier = 0.5f + (force * 0.5f)
                val growth = growthSpeed * forceMultiplier
                
                leaves[i] = leaf.copy(growthProgress = (leaf.growthProgress + growth).coerceAtMost(1f))
            }
        }
    }
    
    private fun updateLeafOscillations() {
        for (i in leaves.indices) {
            val leaf = leaves[i]
            
            val windStrength = 0.3f
            val timeOffset = i * 0.5f
            val sizeMultiplier = when (leaf.leafType) {
                LeafType.BASAL_LARGE -> 0.5f
                LeafType.STEM_MEDIUM -> 0.8f
                LeafType.STEM_SMALL -> 1.2f
            }
            
            val oscillation = sin((System.currentTimeMillis() * 0.001f) + timeOffset) * 
                             windStrength * sizeMultiplier * leaf.growthProgress
            
            leaves[i] = leaf.copy(oscillation = oscillation)
        }
    }
    
    // ==================== UTILITAIRES ====================
    
    private fun findStemPointAtHeight(points: List<PlantStem.StemPoint>, targetHeight: Float): PlantStem.StemPoint? {
        if (points.isEmpty()) return null
        
        val baseY = plantStem.getStemBaseY()
        val targetY = baseY - targetHeight
        
        return points.minByOrNull { abs(it.y - targetY) }
    }
}
